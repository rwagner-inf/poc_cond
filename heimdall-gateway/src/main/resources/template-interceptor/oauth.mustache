import static br.com.conductor.heimdall.core.util.Constants.INTERRUPT;

import java.util.*;


import com.netflix.zuul.ZuulFilter;
import com.google.common.collect.Sets;
import com.netflix.zuul.context.RequestContext;
import br.com.conductor.heimdall.core.enums.InterceptorLifeCycle;
import br.com.conductor.heimdall.gateway.filter.helper.*;
import br.com.conductor.heimdall.gateway.filter.HeimdallFilter;
import br.com.conductor.heimdall.gateway.filter.helper.HelperImpl;
import br.com.conductor.heimdall.gateway.trace.TraceContextHolder;
import br.com.conductor.heimdall.middleware.spec.*;
import br.com.conductor.heimdall.middleware.spec.Helper;
import br.com.conductor.heimdall.middleware.spec.Http;
import br.com.conductor.heimdall.core.util.BeanManager;
import br.com.conductor.heimdall.gateway.service.OAuthInterceptorService;

public class OAuthInterceptor extends HeimdallFilter {

     private static Set<String> pathsAllowed;

     private static Set<String> pathsNotAllowed;

     private static String inboundURL;

     private static String method;
     
     private Helper helper;

     private Long providerId = {{providerId}};

     private int timeAccessToken = {{timeAccessToken}};

     private int timeRefreshToken = {{timeRefreshToken}};

     private String privateKey = "{{privateKey}}";

     private OAuthInterceptorService oAuthInterceptorService;

     public OAuthInterceptor() {

          pathsAllowed = Sets.newHashSet();
     {{#pathsAllowed}}
          pathsAllowed.add("{{.}}");
     {{/pathsAllowed}}      

          pathsNotAllowed = Sets.newHashSet();
     {{#pathsNotAllowed}}
          pathsNotAllowed.add("{{.}}");
     {{/pathsNotAllowed}}           

          inboundURL = "{{inboundURL}}";
          method = "{{method}}";

          this.helper = new HelperImpl();

     }

     @Override
     public int filterOrder() {

          return {{order}};
     }

     @Override
     public String filterType() {

          return "{{executionPoint}}";
     }

     @Override
     public boolean should() {

           return InterceptorLifeCycle.{{lifeCycle}}.filter(pathsAllowed, pathsNotAllowed, inboundURL, method, RequestContext.getCurrentContext().getRequest());
     }
     
     @Override
     public String getName() {
     	return "{{name}}"
     }

     @Override
     public void execute() throws Throwable {
                    
        oAuthInterceptorService = (OAuthInterceptorService) BeanManager.getBean(OAuthInterceptorService.class);

        oAuthInterceptorService.executeInterceptor("{{typeOAuth}}", privateKey, timeAccessToken, timeRefreshToken, providerId, helper);

        return null;
          
     }
}