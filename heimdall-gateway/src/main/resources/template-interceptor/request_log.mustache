import java.util.*;

import java.io.IOException;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.util.ReflectionUtils;
import org.springframework.util.StreamUtils;

import com.google.common.collect.Sets;
import com.netflix.zuul.context.RequestContext;

import br.com.conductor.heimdall.core.enums.InterceptorLifeCycle;
import br.com.conductor.heimdall.gateway.filter.HeimdallFilter;
import br.com.conductor.heimdall.gateway.filter.helper.*;
import br.com.conductor.heimdall.gateway.trace.RequestResponseParser;
import br.com.conductor.heimdall.gateway.trace.TraceContextHolder;
import br.com.conductor.heimdall.core.util.DigestUtils;
import br.com.conductor.heimdall.core.util.UrlUtil;
import br.com.conductor.heimdall.middleware.spec.*;

public class LogRequestInterceptor extends HeimdallFilter {

     private static Set<String> pathsAllowed;

     private static Set<String> pathsNotAllowed;

     private static String inboundURL;

     private static String method;

     private Helper helper;

     public LogRequestInterceptor() {

          method = "{{method}}";

          pathsAllowed = Sets.newHashSet();
     {{#pathsAllowed}}
          pathsAllowed.add("{{.}}");
     {{/pathsAllowed}}      

          pathsNotAllowed = Sets.newHashSet();
     {{#pathsNotAllowed}}
          pathsNotAllowed.add("{{.}}");
     {{/pathsNotAllowed}}           

          inboundURL = "{{inboundURL}}";

          this.helper = new HelperImpl();

     }

     @Override
     public int filterOrder() {

          return {{order}};
     }

     @Override
     public String filterType() {

          return "{{executionPoint}}";
     }

     @Override
     public boolean should() {

          return InterceptorLifeCycle.{{lifeCycle}}.filter(pathsAllowed, pathsNotAllowed, inboundURL, method, RequestContext.getCurrentContext().getRequest());
     }
     
     @Override
     public String getName() {
     	return "{{name}}"
     }

     @Override
     public void execute() throws Throwable {

          RequestContext ctx = RequestContext.getCurrentContext();
          HttpServletRequest request = ctx.getRequest();

          RequestResponseParser r = new RequestResponseParser();
          r.setHeaders(getRequestHeadersInfo(request));          
          r.setBody(helper.call().request().getBody());
          r.setUri(UrlUtil.getCurrentUrl(request));

          TraceContextHolder.getInstance().getActualTrace().setRequest(r);
     }

     private Map<String, String> getRequestHeadersInfo(HttpServletRequest request) {
               
          HashMap<String, String> map = new HashMap<String, String>();
          Enumeration<String> headerNames = request.getHeaderNames();
          while (headerNames.hasMoreElements()) {
               
               String key = (String) headerNames.nextElement();
               
               String value = null;
               if ("access_token".equals(key) || "client_id".equals(key)) {
                    
                    value = DigestUtils.digestMD5(request.getHeader(key));
               } else {
                    
                    value = request.getHeader(key);
               }
               
               map.put(key, value);
          }

          return map;
     }

}