import java.util.*;

import java.time.Duration;
import java.time.LocalDateTime;

import org.redisson.api.RLock;
import org.redisson.api.RedissonClient;

import org.springframework.cloud.netflix.zuul.filters.support.FilterConstants;
import org.springframework.http.HttpStatus;
import org.springframework.util.AntPathMatcher;
import org.springframework.util.PathMatcher;

import com.google.common.collect.Sets;
import com.netflix.zuul.context.RequestContext;

import br.com.conductor.heimdall.core.entity.Interceptor;
import br.com.conductor.heimdall.core.entity.RateLimit;
import br.com.conductor.heimdall.core.enums.InterceptorLifeCycle;
import br.com.conductor.heimdall.core.enums.Interval;
import br.com.conductor.heimdall.gateway.filter.HeimdallFilter;
import br.com.conductor.heimdall.gateway.filter.helper.*;
import br.com.conductor.heimdall.gateway.trace.TraceContextHolder;
import br.com.conductor.heimdall.core.repository.RateLimitRepository;
import br.com.conductor.heimdall.core.util.BeanManager;
import br.com.conductor.heimdall.middleware.spec.*;

public class RateLimitInterceptor extends HeimdallFilter {

     private static Set<String> pathsAllowed;

     private static Set<String> pathsNotAllowed;

     private RateLimitRepository repository;

     private static String inboundURL;

     private static String method;

     private PathMatcher pathMatcher = new AntPathMatcher();

     private RedissonClient redisson;

     private Helper helper;

     public RateLimitInterceptor() {

          method = "{{method}}";

          pathsAllowed = Sets.newHashSet();
          {{#pathsAllowed}}
               pathsAllowed.add("{{.}}");
          {{/pathsAllowed}}      

          pathsNotAllowed = Sets.newHashSet();
          {{#pathsNotAllowed}}
               pathsNotAllowed.add("{{.}}");
          {{/pathsNotAllowed}}           

          inboundURL = "{{inboundURL}}";

          this.helper = new HelperImpl();
     }

     @Override
     public boolean should() {

          return InterceptorLifeCycle.{{lifeCycle}}.filter(pathsAllowed, pathsNotAllowed, inboundURL, method, RequestContext.getCurrentContext().getRequest());
     }
     
     @Override
     public String getName() {
     	return "{{name}}"
     }

     @Override
     public void execute() throws Throwable {
          repository = (RateLimitRepository) BeanManager.getBean(RateLimitRepository.class);
          redisson = (RedissonClient) BeanManager.getBean(RedissonClient.class);
          RequestContext ctx = RequestContext.getCurrentContext();
          
          RLock lock = redisson.getLock({{name}});
          lock.lock();

          RateLimit rate = repository.find("{{path}}");
          if (rate.getLastRequest() == null) {
               rate.setLastRequest(LocalDateTime.now());
          }
          
          
          if (isIntervalEnded(rate)) {
               rate.reset();
               rate.decreaseRemaining();
               repository.save(rate);
          } else {
               if (rate.hasRemaining()) {
                    rate.decreaseRemaining();
                    repository.save(rate);
               } else {
                    ctx.setSendZuulResponse(false);
                    ctx.setResponseStatusCode(HttpStatus.TOO_MANY_REQUESTS.value());
                    ctx.setResponseBody(HttpStatus.TOO_MANY_REQUESTS.getReasonPhrase());
               }
               
          }
          lock.unlock();
     }

     private boolean isIntervalEnded(RateLimit rate) {         

          if (rate.getInterval() == Interval.SECONDS) {
               return Duration.between(LocalDateTime.now(), rate.getLastRequest()).getSeconds() != 0;
          } else if (rate.getInterval() == Interval.MINUTES) {
               return Duration.between(LocalDateTime.now(), rate.getLastRequest()).toMinutes() != 0;
          } else {
               return Duration.between(LocalDateTime.now(), rate.getLastRequest()).toHours() != 0;
          }
     }

     @Override
     public String filterType() {

          return "{{executionPoint}}";
     }

     @Override
     public int filterOrder() {

          return {{order}};
     }

}
