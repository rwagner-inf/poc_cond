import java.util.*;

import org.springframework.util.ReflectionUtils;

import com.google.common.collect.Sets;
import com.netflix.zuul.context.RequestContext;

import br.com.conductor.heimdall.core.enums.InterceptorLifeCycle;
import br.com.conductor.heimdall.gateway.filter.HeimdallFilter;
import br.com.conductor.heimdall.gateway.filter.helper.*;
import br.com.conductor.heimdall.gateway.trace.TraceContextHolder;
import br.com.conductor.heimdall.core.util.ConstantsInterceptors;
import br.com.conductor.heimdall.middleware.spec.*;

public class MockInterceptor extends HeimdallFilter {

     private static Set<String> pathsAllowed;

     private static Set<String> pathsNotAllowed;

     private static String inboundURL;

     private static String method;

     private Helper helper;

     public MockInterceptor() {

          method = "{{method}}";

          pathsAllowed = Sets.newHashSet();
     {{#pathsAllowed}}
          pathsAllowed.add("{{.}}");
     {{/pathsAllowed}}      

          pathsNotAllowed = Sets.newHashSet();
     {{#pathsNotAllowed}}
          pathsNotAllowed.add("{{.}}");
     {{/pathsNotAllowed}}           

          inboundURL = "{{inboundURL}}";

          this.helper = new HelperImpl();

     }

     @Override
     public int filterOrder() {

          return {{order}};
     }

     @Override
     public String filterType() {

          return "{{executionPoint}}";
     }

     @Override
     public boolean should() {

          return InterceptorLifeCycle.{{lifeCycle}}.filter(pathsAllowed, pathsNotAllowed, inboundURL, method, RequestContext.getCurrentContext().getRequest());
     }
     
     @Override
     public String getName() {
     	return "{{name}}"
     }

     @Override
     public void execute() throws Throwable {
          
          RequestContext ctx = RequestContext.getCurrentContext();

          String status = "{{status}}";     

          boolean jsonValid = helper.json().isJson("{{{body}}}");          

          String body = "";
          if (jsonValid) {
               body = helper.json().parse("{{{body}}}");

               helper.call().response().header().add("Content-Type", "application/json");
          } else {

               body = "{{{body}}}";

               helper.call().response().header().add("Content-Type", "text/plain");
          }
          
          helper.call().response().setBody(body);
               
          ctx.setSendZuulResponse(false);
          ctx.setResponseStatusCode(Integer.valueOf(status));

          TraceContextHolder.getInstance().getActualTrace().trace(ConstantsInterceptors.GLOBAL_MOCK_INTERCEPTOR_LOCALIZED, body);
     }

}
