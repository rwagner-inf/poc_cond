package br.com.conductor.heimdall.core.util;


public class TemplateInterceptorUtil {

     public static final String TEMPLATE_DEFAULT = "import java.time.LocalDateTime;import javax.servlet.http.HttpServletRequest;import org.springframework.http.HttpStatus;import org.springframework.util.ReflectionUtils;import com.netflix.zuul.ZuulFilter;import com.netflix.zuul.context.RequestContext;import br.com.conductor.heimdall.entity.AccessToken;import br.com.conductor.heimdall.enums.Location;import br.com.conductor.heimdall.repository.AccessTokenRepository;import br.com.conductor.heimdall.trace.TraceContextHolder;import br.com.conductor.heimdall.util.BeanManager;import br.com.conductor.heimdall.util.ConstantsInterceptors;import br.com.twsoftware.alfred.object.Objeto;public class AccessTokenInterceptor extends ZuulFilter { private AccessTokenRepository accessTokenRepository; @Override public int filterOrder() { return {{order}}; } @Override public String filterType() { return \\\"{{executionPoint}}\\\"; } @Override public boolean shouldFilter() { RequestContext ctx = RequestContext.getCurrentContext(); if (ctx.getRequest().getRequestURI().contains(\\\"{{path}}\\\")) { return true; } else { return false; } } @Override public Object run() { accessTokenRepository = (AccessTokenRepository) BeanManager.getBean(AccessTokenRepository.class); RequestContext ctx = RequestContext.getCurrentContext(); HttpServletRequest request = ctx.getRequest(); String accessToken = null; Location location = Location.valueOf(\\\"{{location}}\\\"); String name = \\\"{{name}}\\\"; if (Location.HEADER.equals(location)) { accessToken = request.getHeader(name); } else { accessToken = request.getParameter(name); } TraceContextHolder.getInstance().getActualTrace().setAccessToken(accessToken); boolean error = false; try { if (Objeto.notBlank(accessToken)) { AccessToken token = accessTokenRepository.findAccessTokenActive(accessToken, LocalDateTime.now()); if (Objeto.notBlank(token)) { TraceContextHolder.getInstance().getActualTrace().setApp(token.getApp().getName()); } else { error = true; } } } catch (Exception e) { ReflectionUtils.rethrowRuntimeException(e); } if (error) { ctx.setSendZuulResponse(false); ctx.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value()); ctx.setResponseBody(String.format(ConstantsInterceptors.GLOBAL_CLIENT_ID_OR_ACESS_TOKEN_NOT_FOUND, \\\"Access Token\\\")); } return null; }}";
}
